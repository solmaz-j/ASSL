package generatedbyassl.as.aes.buffer.aeip.managed_elements;

import java.io.Serializable;
import java.util.Date;

import generatedbyassl.as.ASSLMANAGED_ELEMENT;

/**
 * Generated by ASSL Framework
 * 
 * This is the Java class generated for 'Buffer' (specified as MANAGED_ELEMENT ASSL tier).
 */
public class BUFFER
	extends ASSLMANAGED_ELEMENT
	implements  Serializable
{

	/**
	 * Generated by ASSL Framework
	 * 
	 * This is a reference to the unique instance of 'BUFFER' class.
	 */
	static private BUFFER oInstance = null;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Needed by the class because it implements the Serializable interface.
	 */
	static final long serialVersionUID = 0001L;

	/**
	 * Generated by ASSL Framework
	 * 
	 * Because this is a singleton class its constructor is private.
	 */
	private  BUFFER (  )
	{
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * This method returns the unique instance of 'BUFFER' class.
	 */
	static public BUFFER getInstance (  )
	{
		if ( null == oInstance ) 
		{
			oInstance = new BUFFER();
		}
		return oInstance;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Management element interface function.
	 */
//	public void PUTINBUFFER (  )
//	{
//		//**** Implement this method.
//	}

	public Date PUTINBUFFER (  )
	{
		//**** Implement this method.
		Date poBufferElement;
		poBufferElement = new Date();
		// put the newly created element in the buffer
		System.out.println("Producer: requests to put: " + poBufferElement.toString());
		return(poBufferElement);

	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Management element interface function.
	 */
	public void GETFROMBUFFER (Date poBufferElement )
	{
		//**** Implement this method.

		System.out.println("Consumer: successfully consumed: " + poBufferElement.toString());

	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Management element interface function.
	 * @return
	 */
	public int PCTFULL (int iCount,int iCurrentCapacity )
	{
		//**** Implement this method.

		System.out.println("Buffer percentage full request: ");
		int pctFull = iCount/iCurrentCapacity;
		return pctFull;

	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Management element interface function.
	 */
	public void EXPAND ( int iCurrentCapacity,int BUFFER_SIZE )
	{
		//**** Implement this method.
		System.out.println("Buffer expansion request: ");
		if (iCurrentCapacity  <= BUFFER_SIZE * 0.5) {
			System.out.print("Expanding the buffer from " + iCurrentCapacity);
			iCurrentCapacity = 2*BUFFER_SIZE;
			System.out.println(" to " + iCurrentCapacity);
		} else {
			System.out.println("Cannot expand, buffer has reached maximal size!");
		}
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Management element interface function.
	 */
	public void REDUCE ( int iCurrentCapacity ,int BUFFER_SIZE)
	{
		//**** Implement this method.
		System.out.println("Buffer reduction request: ");
		if (iCurrentCapacity / 10 >= BUFFER_SIZE * 0.5) {
			System.out.print("Reducing the buffer from " +iCurrentCapacity);
			iCurrentCapacity = (int) (0.5*BUFFER_SIZE);
			System.out.println(" to " + iCurrentCapacity);
		} else {
			System.out.println("Cannot reduce, buffer has reached minimal size!");
		}
	}

}
